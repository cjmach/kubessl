#!/bin/sh

# Copyright 2019 Carlos Machado.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

usage() {
    cat <<-EOF
This script combines Cloudflare's cfssl CLI tool with kubectl to:
1. Generate a self-signed root CA certificate;
2. Store the resulting certificate as a kubernetes TLS secret.

Usage: $0 [-f] [-h] [-n NAMESPACE] [-o PREFIX] [-r CSR] [-s SECRET]

Options:
    -f  Force the creation of the kubernetes secret (default is 'no').
        If this option is present and the secret already exists, it will be deleted first.
    -h  Prints this message and exits.
    -n  Kubernetes namespace where the resulting secret will be stored.
    -o  Name prefix for the resulting certificate files (default is 'ca').
        By default, it generates 3 files named: ca.pem, ca-key.pem and ca.csr
    -r  Path to the Certificate Signing Request (CSR) file.
    -s  Kubernetes secret name.
EOF
}

csr_file='ca-csr.json'
output_file='ca'
k8s_secret='ca-tls'
k8s_namespace='default'
force='no'

while getopts ':c:fhn:o:r:s:' options; do
    case "${options}" in
        f)
            force='yes'
            ;;
        h)
            usage
            exit 0
            ;;
        n)
            k8s_namespace="${OPTARG}"
            ;;
        o)
            output_file="${OPTARG}"
            ;;
        r)
            csr_file="${OPTARG}"
            ;;
        s)
            k8s_secret="${OPTARG}"
            ;;
        :)
            echo "[ERROR] -${OPTARG} requires an argument." 1>&2
            usage
            exit 1
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

cfssl gencert -initca "${csr_file}" | cfssljson -bare "${output_file}"

if [ "${force}" = 'yes' ]; then
    kubectl -n ${k8s_namespace} delete secret ${k8s_secret} > /dev/null 2>&1 || true
fi
kubectl -n ${k8s_namespace} create secret tls ${k8s_secret} --cert="${output_file}.pem" --key="${output_file}-key.pem"
